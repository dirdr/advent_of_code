use crate::helper_lib::{answer::Answer, solution::Solution};

pub struct Day11;

impl Solution for Day11 {
    fn part_a(&self, input: &[String]) -> Answer {
        let mut sky = parse(input);
        sky.expand();
    }

    fn part_b(&self, input: &[String]) -> Answer {
        todo!()
    }
}

struct Sky {
    elements: Vec<Vec<Element>>,
}

impl Sky {
    pub fn expand(&mut self) {
        let (rows, cols) = (self.elements.len(), self.elements[0].len());
        for i in 0..rows {
            if self.row_empty(i) {
                self.insert_row(i);
            }
            for j in 0..cols {
                if self.col_empty(j) {
                    self.insert_col(j);
                }
            }
        }
    }

    pub fn make_pairs(&self) -> Vec<(Element, Element)> {
        let (rows, cols) = (self.elements.len(), self.elements[0].len());
        let mut pairs = vec![];
        let mut galaxies = self.elements.iter().filter(|e| *e != Element::Empty)
    }

    fn row_empty(&self, position: usize) -> bool {
        self.elements[position].iter().all(|e| *e == Element::Empty)
    }

    fn col_empty(&self, position: usize) -> bool {
        self.elements
            .iter()
            .all(|row| row[position] == Element::Empty)
    }

    fn insert_row(&mut self, position: usize) {
        let len = self.elements[0].len();
        self.elements.insert(position, vec![Element::Empty; len])
    }

    fn insert_col(&mut self, position: usize) {
        for row in self.elements.iter_mut() {
            row.insert(position, Element::Empty);
        }
    }
}

fn parse(input: &[String]) -> Sky {
    let mut elements = vec![];
    for (i, row) in input.iter().enumerate() {
        let mut temp = vec![];
        for (j, el) in row.chars().enumerate() {
            match el {
                '.' => temp.push(Element::Empty),
                '#' => temp.push(Element::Galaxy((j, i))),
                _ => unreachable!(),
            }
        }
        elements.push(temp);
    }
    Sky { elements }
}

#[derive(Clone, PartialEq)]
enum Element {
    Galaxy((usize, usize)),
    Empty,
}

#[cfg(test)]
mod test {
    use crate::helper_lib::{self, answer::Answer, input, solution::Solution};

    use super::Day11;

    #[test]
    pub fn test_a() {
        let input =
            input::read_file(&format!("{}day_11_test.txt", helper_lib::FILES_PREFIX)).unwrap();
        let answer = Day11.part_a(&input);
        assert_eq!(<i32 as Into<Answer>>::into(374), answer);
    }

    pub fn test_b() {
        let input =
            input::read_file(&format!("{}day_11_b_test.txt", helper_lib::FILES_PREFIX)).unwrap();
        let answer = Day11.part_b(&input);
        assert_eq!(<i32 as Into<Answer>>::into(10), answer);
    }
}
